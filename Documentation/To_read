🌍 RFC

Les requests for comments (RFC), littéralement « demande de commentaires », sont une série numérotée de documents décrivant les aspects et spécifications techniques d'Internet, ou de différents matériels informatiques (routeurs, serveur DHCP).

RFC HTPP :
	http://www.faqs.org/rfcs/rfc2616.html

Les RFC importantes a lire sont les RFC 7230 7231 7232 7233 723 7235 en plus du 2616. 

📡 NGINX

https://www.nginx.com/resources/wiki/start/
https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
https://wiki.debian.org/Nginx/DirectoryStructure

🔨 POUR DEMARRER

EXAMPLE DE WEB SERVER EN C++ :
	https://www.tutorialspoint.com/cplusplus/cpp_web_programming.htm

QU'EST CE QU'UN CGI :
	https://fr.wikipedia.org/wiki/Common_Gateway_Interface

CREER UN SOCKET SERVEUR :

	1 - https://ocamil.com/index.php/c-c/c-c-les-sockets#:~:text=On%20cr%C3%A9e%20une%20socket%20par,table%20des%20descripteurs%20des%20processus
	2 - https://fr.acervolima.com/programmation-de-sockets-en-c-c/




ETAPES :

1	- Implémentation du TCP (Transport layer of HTTP)
	Pour cela, on va devoir apprendre comment fonctionne les sockets en TCP.
	Les sockets permettent a des programmes d'échanger entre différentes machines via un réseau.
	Les étapes seront :

		-	Créer les sockets
		-	Identifierles sockets
		-	Partie server : attendre la connection
		-	Envoyer et recevoir des messages
		-	Fermer le socket
	
	==============================================================
	Créer les socket :
		int server_fd = socket(domain, type, protocol);
		
		domain -> AF_INET (IP), AF_INET6 (IPv6), AF_UNIX (local channel similar to pipes),
					AF_ISO (ISO protocols), AF_NS (Xerox Network Systems protocols);

		type -> SOCK_STREAM (virtual circuit service), SOCK_DGRAM(datagram service), SOCK_RAW(direct IP 		service)

		protocol -> == 0 (pcq protocol TCP)


				#include <sys/socket.h>
				...
				...
				if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
				{
					perror("cannot create socket");
					return 0;
				}


	==============================================================
	Identifier un socket :

		Nommer un socket c'est associer un port au socket -> fonction bind
		Utilisation de la struct sockaddr.

				int bind(int socket, const struct sockaddr *address, socklen_t address_len);

			1er Parametre : Le socket créé avec la fonction socket.

			2eme Parametre : La structure sockaddr. Pour les adresses IP, on utilisera
			une struct sockaddr_in -> #include <netinet/in.h>

					struct sockaddr_in
					{
						__uint8_t		sin_len;
						sa_family_t		sin_family;
						in_port_t		sin_port;
						struct in_addr	sin_addr;
						char			sin_zero[8];
					} 
			Il faut initialiser cette structure avant de pouvoir utiliser bind.
				
				sin_family -> AF_INET

				sin_port -> parser le port, sinon le définir explicitement

				sin_addr -> adresse IP de la machine


	
	
	==============================================================


============== Config File =============
 -redirections et pages d'erreur ont des port predefini selon la norme HTTP
 -> https://fr.wikipedia.org/wiki/Liste_des_codes_HTTP

======== INFO WALTER ===========

	Vidéo interessante a regarder (y'a plusieurs parties)

	-> https://www.youtube.com/watch?v=YwHErWJIh6Y

===========================


======== DOC JP ===========
	- Dossier Project ajoute avec une demo de creation de socket TCP
	- main.cpp contient l'implementation du doc "HTTP Server: Everything you nee to [...] " 
	- le serv retourne toujours la meme reponse, valide 200, ainsi que le code html de index.html
	- Cette demo montre la creation d'un socket et comment transmettre les datas
	- Le serv fait, actuellement, autant de fois la meme et unique reponse que de requete client. 

	pour lancer la demo : make && ./webserv
	ensuite ouvrir un navigateur et se rendre sur http:://localhost:8080/index.html

	Documentation : 
	https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms#introduction
	Ce doc il explique clairement le parsing du fichier .conf 
	D'ailleurs vous pouvez vous amusez a identifier dans la demo les valeurs qui dependent
	du parsing de ce fichier. 

	Je vous envoie un mail pour faire le bilan et faire quelques planifications
	TODO : pleins de trucs lol cf mail bisous

===========================



======= DOC VICTOR ========
	****************

	-socket link: - https://www.geeksforgeeks.org/socket-programming-cc/
		description: 
			-	Diagram pour comprendre les relations client server avec les fonctions
				STATE DIAGRAM FOR SERVER AND CLIENT MODEL OF SOCKET
			-	Description des fonctions de relation.	

	-Multi_client using select() :
		-	data structure name fd_set (how to use):
			``` fd_set readfds; ```
				// clear an fd_set : FD_ZERO(&readfds);
				// add a descriptor to an fd_set : FD_SET(master_sock, &readfds);	
				// remove a descriptor form an fd_set : FD_CLR(master_sock, &readfds);
				// if something happend on the master socket, then its an incoming connection :
					 FD_ISSET(master_sock, &readfds);

	
===========================
