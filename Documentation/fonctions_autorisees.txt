
LISTE DES FONCTIONS AUTORISEES AVEC DESCRIPTION :




/************************************************************************
*								- malloc -								*
*************************************************************************
*																		*
*	#include <cstdlib> en C++											*
*																		*
*	void * malloc( size_t memorySize );									*
*	Cette fonction permet d'allouer un bloc de mémoire dans le tas		*
*	(le heap en anglais). Attention : la mémoire allouée dynamiquement	*
*	n'est pas automatiquement relachée. Il faudra donc, après			*
*	utilisation, libérer ce bloc de mémoire via un appel à la 			*
*	fonction free.														*
************************************************************************/



/************************************************************************
*								- free -								*
*************************************************************************
*																		*
*	#include <cstdlib> en C++											*
*																		*
*	void free( void * pointer );										*
*																		*
*	La fonction free libère un bloc de mémoire alloué dynamiquement		*
*	dans le tas (le heap, en anglais), via un appel à la fonction		*
*	malloc (ou tout autre fonction d'allocation mémoire :				*
*	aligned_alloc, calloc ou realloc).									*
*																		*
*	Note : ne jamais désallouer avec la fonction free un bloc de		*
*	mémoire obtenu autrement que par l'une des quatre fonctions			*
*	présentées ci-dessus.												*
************************************************************************/



/************************************************************************
*								- write -								*
*************************************************************************
*																		*
*	#include <unistd.h>													*
*																		*
*	ssize_t write(int fd, const void *buf, size_t count);  				*
*																		*
*	write() écrit jusqu'à count octets dans le fichier associé au		*
*	descripteur fd depuis le tampon pointé par buf.						*
************************************************************************/



/************************************************************************
*					- htons / htonl / ntohs / ntohl -					*
*************************************************************************
*																		*
*	#include <arpa/inet.h>												*
*																		*
*	uint32_t htonl(uint32_t hostlong);									*
*	uint16_t htons(uint16_t hostshort);									*
*	uint32_t ntohl(uint32_t netlong);									*
*	uint16_t ntohs(uint16_t netshort);									*
*																		*
*	La fonction htonl() convertit un entier non signé hostlong depuis	*
*	l'ordre des octets de l'hôte vers celui du réseau.					*
*																		*
*	La fonction htons() convertit un entier court non signé hostshort	*
*	depuis l'ordre des octets de l'hôte vers celui du réseau.			*
*																		*
*	La fonction ntohl() convertit un entier non signé netlong depuis	*
*	l'ordre des octets du réseau vers celui de l'hôte.					*
*																		*
*	La fonction ntohs() convertit un entier court non signé netshort	*
*	depuis l'ordre des octets du réseau vers celui de l'hôte.			*
*																		*
*	Sur les i386, l'ordre des octets de l'hôte est LSB					*
*	(« Least Significant Byte first»), c'est-à-dire octet de poids		*
*	faible en premier, alors que sur les réseaux, notamment				*
*	l'Internet, l'ordre est MSB (« Most Significant Byte first »)		*
*	octet de poids fort en premier.  									*
************************************************************************/



/************************************************************************
*								- select -								*
*************************************************************************
*																		*
*	#include <unistd.h>													*
*	#include <sys/select.h>												*
*	#include <sys/time.h>												*
*	#include <sys/types.h>												*
*																		*
*	int select(int nfds, fd_set *readfds, fd_set *writefds,				*
*			   fd_set *exceptfds, struct timeval *timeout);  			*
*																		*
*	Les fonctions select() et pselect() permettent à un programme de	*
*	surveiller plusieurs descripteurs de fichier, attendant qu'au moins	*
*	l'un des descripteurs de fichier devienne « prêt » pour certaines	*
*	classes d'opérations d'entrées-sorties (par exemple, entrée			*
*	possible). Un descripteur de fichier est considéré comme prêt s'il	*
*	est possible d'effectuer l'opération d'entrées-sorties				*
*	correspondante (par exemple, un read(2)) sans bloquer.				*
*																		*
*	select() et pselect() ont un comportement identique, avec trois		*
*	différences :														*
*																		*
*	(i) La fonction select() utilise un délai exprimé avec une struct	*
*	timeval (secondes et microsecondes), alors que pselect() utilise	*
*	une struct timespec (secondes et nanosecondes).						*
*																		*
*	(ii) La fonction select() peut modifier le paramètre timeout pour	*
*	indiquer le temps restant. La fonction pselect() ne change pas		*
*	ce paramètre.														*
*																		*
*	(iii) La fonction select() n'a pas de paramètre sigmask et se		*
*	comporte comme pselect() avec une valeur NULL pour sigmask			*
*																		*
*	Il y a trois ensembles indépendants de descripteurs surveillés		*
*	simultanément. Ceux de l'ensemble readfds seront surveillés			*
*	pour vérifier si des caractères deviennent disponibles en			*
*	lecture. Plus précisément, on vérifie si un appel système de		*
*	lecture ne bloquera pas ; en particulier un descripteur en fin		*
*	de fichier sera considéré comme prêt. Les descripteurs de			*
*	l'ensemble writefds seront surveillés pour vérifier si une			*
*	écriture ne bloquera pas. Ceux de exceptfds seront surveillés		*
*	pour l'occurrence de conditions exceptionnelles. En sortie, les		*
*	ensembles sont modifiés pour indiquer les descripteurs de fichier	*
*	qui ont changé d'état. Chacun des trois ensembles de descripteurs	*
*	de fichier peut être spécifié comme NULL si aucun descripteur de	*
*	fichier n'est surveillé pour la classe correspondante d'événements.	*
************************************************************************/



/************************************************************************
*								- poll -								*
*************************************************************************
*																		*
*	#include <poll.h>													*
*																		*
*	int poll(struct pollfd *fds, nfds_t nfds, int délai);  				*
*																		*
*	poll() est une variation de select(2) : il attend que l'un des		*
*	descripteurs de fichier parmi un ensemble soit prêt pour effectuer	*
*	des entrées-sorties.												*
*	L'ensemble des descripteurs de fichier à surveiller est indiqué		*
*	dans l'argument fds qui est un tableau de structures nfds du type :	*
*																		*
*	struct pollfd {														*
*	    int   fd;         /* Descripteur de fichier */					*
*	    short events;     /* Événements attendus    */					*
*	    short revents;    /* Événements détectés    */					*
*	};																	*
*																		*
*	Le champ fd contient un descripteur de fichier ouvert. Le champ		*
*	events est un paramètre d'entrée, un masque de bits indiquant les	*
*	événements qui intéressent l'application. Le champ revents est un	*
*	paramètre de sortie, rempli par le noyau avec les événements qui	*
*	se sont effectivement produits. Les bits renvoyés dans revents		*
*	peuvent inclure ceux spécifiés dans events, ou l'une des valeurs	*
*	POLLERR, POLLHUP ou POLLNVAL. (Ces trois bits n'ont pas de			*
*	signification dans la demande events, et se trouvent positionnés	*
*	dans la valeur de retour revents si l'une des conditions			*
*	correspondantes se produit.)										*
*																		*
*	Si aucun événement attendu (ni aucune erreur) ne s'est déjà produit,*
*	poll() bloque jusqu'à ce que l'un des événements survienne.			*
*	L'argument délai définit une limite supérieure, en millisecondes,	*
*	sur le temps pendant lequel poll() bloquera. Définir une valeur		*
*	négative pour délai signifie un délai d'attente infini.				*
*																		*
*	Les bits qui peuvent être positionnés ou renvoyés dans events et	*
*	revents sont définis dans <poll.h> :								*
*																		*
*	POLLIN																*
*		Il y a des données en attente de lecture.						*
*	POLLPRI																*
*		Il y a des données urgentes en attente de lecture (par exemple,	*
*		des données « hors bande » sur une socket TCP ; un				*
*		pseudo-terminal maître en mode paquet a vu l'esclave			*
*		changer d'état).												*
*	POLLOUT																*
*		Une écriture ne bloquera pas.									*
*	POLLRDHUP (depuis Linux 2.6.17)										*
*		Le correspondant sur une socket en mode flux a fermé la			*
*		connexion, ou bien a été mis hors service lors de				*
*		l'écriture sur la connexion. La macro de test de fonctionnalité	*
*		_GNU_SOURCE doit être définie pour obtenir cette définition.	*
*	POLLERR																*
*		Condition d'erreur (uniquement en sortie).						*
*	POLLHUP																*
*		Déconnexion (uniquement en sortie).								*
*	POLLNVAL															*
*		Requête invalide : fd n'est pas ouvert (uniquement en 			*
*		sortie).														*
*																		*
*	Lorsque _XOPEN_SOURCE est définie à la compilation, les macros		*
*	suivantes sont également définies mais n'apportent pas plus			*
*	d'information que les bits précédents :								*
*																		*
*	POLLRDNORM															*
*		Équivalent à POLLIN.											*
*	POLLRDBAND															*
*		Des données prioritaires sont en attente de lecture 			*
*		(généralement pas utilisé sous Linux).							*
*	POLLWRNORM															*
*		Équivalent à POLLOUT.											*
*	POLLWRBAND															*
*		Des données prioritaires peuvent être écrites.					*
************************************************************************/

/************************************************************************
*								- socket -								*
*************************************************************************
*																		*
*	#include <sys/types.h>												*
*	#include <sys/socket.h>												*
*																		*
*	int socket(int domain, int type, int protocol);						*
*																		*
*	socket() crée un point de communication, et renvoie un descripteur.	*
*	Le paramètre domain indique le domaine de communication pour le		*
*	dialogue ; ceci sélectionne la famille de protocole à employer.		*
*	Elles sont définies dans le fichier <sys/socket.h>. Les formats		*
*	actuellement proposés sont :										*
*	Nom						Utilisation					Page			*
*	PF_UNIX, PF_LOCAL		Communication locale		unix(7)			*
*	PF_INET					Protocoles Internet IPv4	ip(7)			*
*	PF_INET6				Protocoles Internet IPv6	ipv6(7)			*
*	PF_IPX					IPX - Protocoles Novell						*
*	PF_NETLINK				Interface utilisateur noyau	netlink(7)		*
*	PF_X25					Protocole ITU-T X.25 / ISO-8208	x25(7)		*
*	PF_AX25					Protocole AX.25 radio amateur				*
*	PF_ATMPVC				Accès direct ATM PVCs						*
*	PF_APPLETALK			Appletalk					ddp(7)			*
*	PF_PACKET				Interface paquet bas-niveau	packet(7)		*
*																		*
*	La socket a le type indiqué, ce qui définit la sémantique des		*
*	communications. Les types actuellement définis sont :				*
*																		*
*	SOCK_STREAM															*
*	Support de dialogue garantissant l'intégrité, fournissant un flux	*
*	de données binaires, et intégrant un mécanisme pour les				*
*	transmissions de données hors-bande.								*
*																		*
*	SOCK_DGRAM															*
*	Transmissions sans connexion, non garantie, de datagrammes de		*
*	longueur maximale fixe.												*
*																		*
*	SOCK_SEQPACKET														*
*	Dialogue garantissant l'intégrité, pour le transport de				*
*	datagrammes de longueur fixe. Le lecteur doit lire le paquet de		*
*	données complet à chaque appel système récupérant l'entrée.			*
*																		*
*	SOCK_RAW															*
*	Accès direct aux données réseau.									*
*																		*
*	SOCK_RDM															*
*	Transmission fiable de datagrammes, sans garantie de l'ordre		*
*	de délivrance.														*
*																		*
*	SOCK_PACKET															*
*	Obsolète, à ne pas utiliser dans les programmes actuels.			*
*																		*
************************************************************************/